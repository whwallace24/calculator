{"ast":null,"code":"var Operator; // abstract class for the state hierarchy. \n\n(function (Operator) {\n  Operator[Operator[\"Plus\"] = 0] = \"Plus\";\n  Operator[Operator[\"Minus\"] = 1] = \"Minus\";\n  Operator[Operator[\"Mult\"] = 2] = \"Mult\";\n  Operator[Operator[\"Div\"] = 3] = \"Div\";\n})(Operator || (Operator = {}));\n\nclass EnteringFirstNumberState {\n  constructor(buffer) {\n    this.buffer = buffer;\n  }\n\n  digit(digit) {\n    this.buffer = this.buffer === '0' && digit !== '0' ? digit : this.buffer + digit;\n  }\n\n  decimalSeparator() {\n    if (this.buffer.indexOf('.') === -1) {\n      // ignore if the number already has a decimal separator\n      this.buffer = this.buffer + '.';\n    }\n  }\n\n  binaryOperator(calc, operator) {\n    calc.changeState(new EnteringSecondNumberState(this.buffer === '' ? '0' : this.buffer, '', operator));\n  }\n\n  equals() {\n    /* pressing equals after entering one number has no effect */\n  }\n\n  clear() {\n    this.buffer = '0';\n  }\n\n  display() {\n    return this.buffer !== '' ? this.buffer : '0';\n  }\n\n}\n\nclass EnteringSecondNumberState {\n  constructor(firstBuffer, secondBuffer, firstOperator) {\n    this.firstBuffer = firstBuffer;\n    this.secondBuffer = secondBuffer;\n    this.firstOperator = firstOperator;\n  }\n\n  digit(digit) {\n    this.secondBuffer = this.secondBuffer === '0' && digit !== '0' ? digit : this.secondBuffer + digit;\n  }\n\n  decimalSeparator() {\n    if (this.secondBuffer.indexOf('.') === -1) {\n      // ignore if the number already has a decimal separator\n      this.secondBuffer = this.secondBuffer + '.';\n    }\n  }\n\n  binaryOperator(calc, operator) {\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\n\n    switch (operator) {\n      case Operator.Plus: // in case of + or - after having entered two numbers, apply the first operator and stay in this state\n\n      case Operator.Minus:\n        // (or go to ErrorState in case of division by zero)\n        if (this.firstOperator === Operator.Plus) {\n          this.firstBuffer = (firstNumber + secondNumber).toString();\n        } else if (this.firstOperator === Operator.Minus) {\n          this.firstBuffer = (firstNumber - secondNumber).toString();\n        } else if (this.firstOperator === Operator.Mult) {\n          this.firstBuffer = (firstNumber * secondNumber).toString();\n        } else if (secondNumber !== 0) {\n          // (this.firstOperator === Operator.Div){\n          this.firstBuffer = (firstNumber / secondNumber).toString();\n        } else {\n          calc.changeState(new ErrorState());\n        }\n\n        this.secondBuffer = '';\n        this.firstOperator = operator;\n        break;\n\n      case Operator.Div: // if we press * or / after having entered two numbers\n\n      case Operator.Mult:\n        if (this.firstOperator === Operator.Mult) {\n          // If the first operator was *, apply it\n          this.firstBuffer = (firstNumber * secondNumber).toString();\n          this.secondBuffer = '';\n          this.firstOperator = operator;\n        } else if (this.firstOperator === Operator.Div) {\n          // If the first operator was /, apply it \n          if (secondNumber === 0) {\n            // check for div by zero\n            calc.changeState(new ErrorState());\n          } else {\n            this.firstBuffer = (firstNumber / secondNumber).toString();\n            this.secondBuffer = '';\n            this.firstOperator = operator;\n          }\n        } else {\n          // If the first operator was + or -, transition to EnteringThirdNumberState\n          calc.changeState(new EnteringThirdNumberState(this.firstBuffer, this.secondBuffer, '', this.firstOperator, operator));\n        }\n\n    }\n  }\n\n  equals(calc) {\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\n\n    if (this.firstOperator === Operator.Plus) {\n      calc.changeState(new EnteringFirstNumberState((firstNumber + secondNumber).toString()));\n    } else if (this.firstOperator === Operator.Minus) {\n      calc.changeState(new EnteringFirstNumberState((firstNumber - secondNumber).toString()));\n    } else if (this.firstOperator === Operator.Mult) {\n      calc.changeState(new EnteringFirstNumberState((firstNumber * secondNumber).toString()));\n    } else if (secondNumber !== 0) {\n      // this.firstOperator === Operator.Div\n      calc.changeState(new EnteringFirstNumberState((firstNumber / secondNumber).toString()));\n    } else {\n      calc.changeState(new ErrorState());\n    }\n  }\n\n  clear(calc) {\n    calc.changeState(new EnteringFirstNumberState('0'));\n  }\n\n  display() {\n    return this.secondBuffer !== '' ? this.secondBuffer : this.firstBuffer;\n  }\n\n} // invariant: firstOperator is Plus or Minus and secondOperator is Div or Mul\n\n\nclass EnteringThirdNumberState {\n  constructor(firstBuffer, secondBuffer, thirdBuffer, firstOperator, secondOperator) {\n    this.firstBuffer = firstBuffer;\n    this.secondBuffer = secondBuffer;\n    this.thirdBuffer = thirdBuffer;\n    this.firstOperator = firstOperator;\n    this.secondOperator = secondOperator;\n  }\n\n  digit(digit) {\n    this.thirdBuffer = this.thirdBuffer === '0' && digit !== '0' ? digit : this.thirdBuffer + digit;\n  }\n\n  decimalSeparator() {\n    if (this.thirdBuffer.indexOf('.') === -1) {\n      // ignore if the number already has a decimal separator\n      this.thirdBuffer = this.thirdBuffer + '.';\n    }\n  }\n\n  binaryOperator(calc, operator) {\n    // evaluate the entire expression and transition to EnteringSecondNumberState \n    // (or ErrorState in case of division by zero)\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\n    const thirdNumber = parseFloat(this.thirdBuffer === '' ? '0' : this.thirdBuffer);\n\n    if (operator === Operator.Mult) {\n      const result = secondNumber * thirdNumber;\n      this.secondBuffer = result.toString();\n      this.thirdBuffer = '';\n    } else if (this.secondOperator === Operator.Div) {\n      if (thirdNumber === 0) {\n        calc.changeState(new ErrorState());\n      } else {\n        const result = secondNumber / thirdNumber;\n        this.secondBuffer = result.toString();\n        this.thirdBuffer = '';\n      }\n    } else if (operator === Operator.Plus || operator === Operator.Minus) {\n      if (this.secondOperator === Operator.Mult) {\n        let result = secondNumber * thirdNumber;\n\n        if (this.firstOperator === Operator.Plus) {\n          result = firstNumber + result;\n        } else {\n          // (this.firstOperator === Operator.Minus)\n          result = firstNumber - result;\n        }\n\n        calc.changeState(new EnteringSecondNumberState(result.toString(), '', operator));\n      } else {\n        // (this.secondOperator === Operator.Div)\n        if (thirdNumber !== 0) {\n          let result = secondNumber / thirdNumber;\n\n          if (this.firstOperator === Operator.Plus) {\n            result = firstNumber + result;\n          } else {\n            // (this.firstOperator === Operator.Minus)\n            result = firstNumber - result;\n          }\n\n          calc.changeState(new EnteringSecondNumberState(result.toString(), '', operator));\n        } else {\n          calc.changeState(new ErrorState());\n        }\n      }\n    }\n  }\n\n  equals(calc) {\n    // evaluate the entire expression and transition to EnteringFirstNumberState\n    // (or ErrorState in case of division by zero)\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\n    const thirdNumber = parseFloat(this.thirdBuffer === '' ? '0' : this.thirdBuffer);\n    let result;\n\n    if (this.secondOperator === Operator.Mult) {\n      result = secondNumber * thirdNumber;\n    } else {\n      // (this.secondOperator === Operator.Div)\n      if (thirdNumber === 0) {\n        calc.changeState(new ErrorState());\n        return;\n      } else {\n        result = secondNumber / thirdNumber;\n      }\n    }\n\n    if (this.firstOperator === Operator.Plus) {\n      calc.changeState(new EnteringFirstNumberState((firstNumber + result).toString()));\n    } else {\n      // (this.firstOperator === Operator.Minus)\n      calc.changeState(new EnteringFirstNumberState((firstNumber - result).toString()));\n    }\n  }\n\n  clear(calc) {\n    calc.changeState(new EnteringFirstNumberState('0'));\n  }\n\n  display() {\n    return this.thirdBuffer !== '' ? this.thirdBuffer : this.secondBuffer !== '' ? this.secondBuffer : '0';\n  }\n\n} // in the ErrorState, pressing \"C\" will reset the calculator to its original state; other keys have no effect\n\n\nclass ErrorState {\n  digit(digit) {\n    /* nothing */\n  }\n\n  decimalSeparator() {\n    /* nothing */\n  }\n\n  binaryOperator(calc, operator) {\n    /* nothing */\n  }\n\n  equals() {\n    /* nothing */\n  }\n\n  clear(calc) {\n    calc.changeState(new EnteringFirstNumberState('0'));\n  }\n\n  display() {\n    return 'ERR';\n  }\n\n}\n\nexport class CalculatorModel {\n  constructor() {\n    this.state = void 0;\n    this.state = new EnteringFirstNumberState('');\n  }\n\n  changeState(state) {\n    this.state = state;\n  } // numeric buttons \n\n\n  pressZero() {\n    this.state.digit('0');\n  }\n\n  pressOne() {\n    this.state.digit('1');\n  }\n\n  pressTwo() {\n    this.state.digit('2');\n  }\n\n  pressThree() {\n    this.state.digit('3');\n  }\n\n  pressFour() {\n    this.state.digit('4');\n  }\n\n  pressFive() {\n    this.state.digit('5');\n  }\n\n  pressSix() {\n    this.state.digit('6');\n  }\n\n  pressSeven() {\n    this.state.digit('7');\n  }\n\n  pressEight() {\n    this.state.digit('8');\n  }\n\n  pressNine() {\n    this.state.digit('9');\n  } // \".\", \"=\", and \"C\" buttons\n\n\n  pressDot() {\n    this.state.decimalSeparator();\n  }\n\n  pressEquals() {\n    this.state.equals(this);\n  }\n\n  pressClear() {\n    this.state.clear(this);\n  } // operator buttons\n\n\n  pressPlus() {\n    this.state.binaryOperator(this, Operator.Plus);\n  }\n\n  pressMinus() {\n    this.state.binaryOperator(this, Operator.Minus);\n  }\n\n  pressMult() {\n    this.state.binaryOperator(this, Operator.Mult);\n  }\n\n  pressDiv() {\n    this.state.binaryOperator(this, Operator.Div);\n  } // returns the contents of the calculator's display\n\n\n  display() {\n    return this.state.display();\n  }\n\n}","map":{"version":3,"sources":["/Users/williamwallace/devel/calculator/src/CalculatorModel.ts"],"names":["Operator","EnteringFirstNumberState","constructor","buffer","digit","decimalSeparator","indexOf","binaryOperator","calc","operator","changeState","EnteringSecondNumberState","equals","clear","display","firstBuffer","secondBuffer","firstOperator","firstNumber","parseFloat","secondNumber","Plus","Minus","toString","Mult","ErrorState","Div","EnteringThirdNumberState","thirdBuffer","secondOperator","thirdNumber","result","CalculatorModel","state","pressZero","pressOne","pressTwo","pressThree","pressFour","pressFive","pressSix","pressSeven","pressEight","pressNine","pressDot","pressEquals","pressClear","pressPlus","pressMinus","pressMult","pressDiv"],"mappings":"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","sourcesContent":["import { throws } from \"assert\";\r\n\r\nenum Operator {\r\n  Plus,\r\n  Minus,\r\n  Mult,\r\n  Div\r\n}\r\n\r\n// abstract class for the state hierarchy. \r\ninterface ICalculatorState {  \r\n  digit(digit: string) : void;\r\n  decimalSeparator() : void;\r\n  binaryOperator(calc: CalculatorModel, operator: Operator) : void;\r\n  equals(calc: CalculatorModel) : void;\r\n  clear(calc: CalculatorModel) : void;\r\n  display() : string\r\n}\r\n\r\nclass EnteringFirstNumberState implements ICalculatorState {\r\n  constructor(private buffer: string){ }\r\n  digit(digit: string): void {\r\n    this.buffer = (this.buffer === '0' && digit !== '0') ? digit : this.buffer + digit; \r\n  }\r\n  decimalSeparator(): void {\r\n    if (this.buffer.indexOf('.') === -1){ // ignore if the number already has a decimal separator\r\n      this.buffer = this.buffer + '.';\r\n    } \r\n  }\r\n  binaryOperator(calc: CalculatorModel, operator: Operator): void {\r\n    calc.changeState(new EnteringSecondNumberState(this.buffer === '' ? '0' : this.buffer, '', operator));\r\n  }\r\n  equals(): void { /* pressing equals after entering one number has no effect */ }\r\n  clear(): void { this.buffer = '0'; }\r\n  display(){ return this.buffer !== '' ? this.buffer : '0'; }\r\n}\r\n\r\nclass EnteringSecondNumberState implements ICalculatorState {\r\n  constructor(private firstBuffer: string, private secondBuffer: string, \r\n              private firstOperator: Operator){ }\r\n  digit(digit: string): void {\r\n    this.secondBuffer = (this.secondBuffer === '0' && digit !== '0') ? digit : this.secondBuffer + digit; \r\n  }\r\n  decimalSeparator(): void {\r\n    if (this.secondBuffer.indexOf('.') === -1){ // ignore if the number already has a decimal separator\r\n      this.secondBuffer = this.secondBuffer + '.';\r\n    } \r\n  }\r\n  binaryOperator(calc: CalculatorModel, operator: Operator): void {\r\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\r\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\r\n    switch (operator){\r\n      case Operator.Plus:   // in case of + or - after having entered two numbers, apply the first operator and stay in this state\r\n      case Operator.Minus:  // (or go to ErrorState in case of division by zero)\r\n        if (this.firstOperator === Operator.Plus){\r\n          this.firstBuffer = (firstNumber + secondNumber).toString()\r\n        } else if (this.firstOperator === Operator.Minus){\r\n          this.firstBuffer = (firstNumber - secondNumber).toString()\r\n        } else if (this.firstOperator === Operator.Mult){\r\n          this.firstBuffer = (firstNumber * secondNumber).toString()\r\n        } else if (secondNumber !== 0){ // (this.firstOperator === Operator.Div){\r\n          this.firstBuffer = (firstNumber / secondNumber).toString()\r\n        } else {\r\n          calc.changeState(new ErrorState());\r\n        }\r\n        this.secondBuffer = '';\r\n        this.firstOperator = operator;\r\n        break;\r\n    case Operator.Div: // if we press * or / after having entered two numbers\r\n    case Operator.Mult:\r\n      if (this.firstOperator === Operator.Mult){ // If the first operator was *, apply it\r\n        this.firstBuffer = (firstNumber * secondNumber).toString();\r\n        this.secondBuffer = '';\r\n        this.firstOperator = operator;\r\n      } else if (this.firstOperator === Operator.Div){ // If the first operator was /, apply it \r\n        if (secondNumber === 0){ // check for div by zero\r\n          calc.changeState(new ErrorState());\r\n        } else {\r\n          this.firstBuffer = (firstNumber / secondNumber).toString();\r\n          this.secondBuffer = '';\r\n          this.firstOperator = operator;\r\n        }\r\n      } else { // If the first operator was + or -, transition to EnteringThirdNumberState\r\n        calc.changeState(new EnteringThirdNumberState(this.firstBuffer, this.secondBuffer, '', this.firstOperator, operator));\r\n      }\r\n    }\r\n  }\r\n  equals(calc: CalculatorModel): void {\r\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\r\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\r\n    if (this.firstOperator === Operator.Plus){\r\n      calc.changeState(new EnteringFirstNumberState((firstNumber + secondNumber).toString()));\r\n    } else if (this.firstOperator === Operator.Minus){\r\n      calc.changeState(new EnteringFirstNumberState((firstNumber - secondNumber).toString()));\r\n    } else if (this.firstOperator === Operator.Mult){\r\n      calc.changeState(new EnteringFirstNumberState((firstNumber * secondNumber).toString()));\r\n    } else if (secondNumber !== 0){  // this.firstOperator === Operator.Div\r\n      calc.changeState(new EnteringFirstNumberState((firstNumber / secondNumber).toString()));\r\n    } else {\r\n      calc.changeState(new ErrorState());\r\n    }\r\n  }\r\n  clear(calc: CalculatorModel): void {\r\n    calc.changeState(new EnteringFirstNumberState('0'));\r\n  }\r\n  display(){ \r\n    return (this.secondBuffer !== '') ? this.secondBuffer : this.firstBuffer; \r\n  }\r\n}\r\n\r\n// invariant: firstOperator is Plus or Minus and secondOperator is Div or Mul\r\nclass EnteringThirdNumberState implements ICalculatorState {\r\n  constructor(private firstBuffer: string, private secondBuffer: string, private thirdBuffer: string, \r\n              private firstOperator: Operator, private secondOperator: Operator){  }\r\n  digit(digit: string): void {\r\n    this.thirdBuffer = (this.thirdBuffer === '0' && digit !== '0') ? digit : this.thirdBuffer + digit; \r\n  }\r\n  decimalSeparator(): void { \r\n    if (this.thirdBuffer.indexOf('.') === -1){ // ignore if the number already has a decimal separator\r\n      this.thirdBuffer = this.thirdBuffer + '.';\r\n    }\r\n  }\r\n  binaryOperator(calc: CalculatorModel, operator: Operator): void { // evaluate the entire expression and transition to EnteringSecondNumberState \r\n                                             // (or ErrorState in case of division by zero)\r\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\r\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\r\n    const thirdNumber = parseFloat(this.thirdBuffer === '' ? '0' : this.thirdBuffer);\r\n    if (operator === Operator.Mult){\r\n      const result = secondNumber*thirdNumber;\r\n      this.secondBuffer = result.toString();\r\n      this.thirdBuffer = '';\r\n    } else if (this.secondOperator === Operator.Div){\r\n      if (thirdNumber === 0){\r\n        calc.changeState(new ErrorState());\r\n      } else {\r\n        const result = secondNumber/thirdNumber;\r\n        this.secondBuffer = result.toString();\r\n        this.thirdBuffer = '';\r\n      } \r\n    } else if (operator === Operator.Plus || operator === Operator.Minus) {  \r\n      if (this.secondOperator === Operator.Mult){\r\n        let result = secondNumber*thirdNumber;\r\n        if (this.firstOperator === Operator.Plus){\r\n          result = firstNumber + result;\r\n        } else { // (this.firstOperator === Operator.Minus)\r\n          result = firstNumber - result;\r\n        }\r\n        calc.changeState(new EnteringSecondNumberState(result.toString(), '', operator));\r\n      } else { // (this.secondOperator === Operator.Div)\r\n        if (thirdNumber !== 0) {\r\n          let result = secondNumber/thirdNumber;\r\n          if (this.firstOperator === Operator.Plus){\r\n            result = firstNumber + result;\r\n          } else { // (this.firstOperator === Operator.Minus)\r\n            result = firstNumber - result;\r\n          }\r\n          calc.changeState(new EnteringSecondNumberState(result.toString(), '', operator));\r\n        } else {\r\n          calc.changeState(new ErrorState());\r\n        }\r\n      } \r\n    }  \r\n  }\r\n  equals(calc: CalculatorModel): void { // evaluate the entire expression and transition to EnteringFirstNumberState\r\n                                        // (or ErrorState in case of division by zero)\r\n    const firstNumber = parseFloat(this.firstBuffer === '' ? '0' : this.firstBuffer);\r\n    const secondNumber = parseFloat(this.secondBuffer === '' ? '0' : this.secondBuffer);\r\n    const thirdNumber = parseFloat(this.thirdBuffer === '' ? '0' : this.thirdBuffer);\r\n    let result;\r\n    if (this.secondOperator === Operator.Mult){\r\n      result = secondNumber*thirdNumber;\r\n    } else { // (this.secondOperator === Operator.Div)\r\n      if (thirdNumber === 0){\r\n        calc.changeState(new ErrorState());\r\n        return;\r\n      } else {\r\n        result = secondNumber/thirdNumber;\r\n      }\r\n    }\r\n    if (this.firstOperator === Operator.Plus){\r\n      calc.changeState(new EnteringFirstNumberState((firstNumber+result).toString()));\r\n    } else { // (this.firstOperator === Operator.Minus)\r\n      calc.changeState(new EnteringFirstNumberState((firstNumber-result).toString()));\r\n    }\r\n  }\r\n  clear(calc: CalculatorModel): void {\r\n    calc.changeState(new EnteringFirstNumberState('0'));\r\n  }\r\n  display(){ \r\n    return (this.thirdBuffer !== '') ? this.thirdBuffer : (this.secondBuffer !== '' ? this.secondBuffer :'0'); \r\n  }\r\n}\r\n// in the ErrorState, pressing \"C\" will reset the calculator to its original state; other keys have no effect\r\nclass ErrorState implements ICalculatorState {\r\n  digit(digit: string): void { /* nothing */ }\r\n  decimalSeparator(): void { /* nothing */ }\r\n  binaryOperator(calc: CalculatorModel, operator: Operator): void { /* nothing */ }\r\n  equals(): void { /* nothing */ }\r\n  clear(calc: CalculatorModel): void { calc.changeState(new EnteringFirstNumberState('0')); }\r\n  display(){ return 'ERR'; }\r\n}  \r\n\r\nexport class CalculatorModel {\r\n  private state: ICalculatorState\r\n  constructor(){ this.state = new EnteringFirstNumberState(''); }\r\n  \r\n  changeState(state: ICalculatorState){ this.state = state; }\r\n  \r\n  // numeric buttons \r\n  public pressZero() : void { this.state.digit('0'); }\r\n  public pressOne() : void { this.state.digit('1'); }\r\n  public pressTwo() : void { this.state.digit('2'); }\r\n  public pressThree() : void { this.state.digit('3'); }\r\n  public pressFour() : void { this.state.digit('4'); }\r\n  public pressFive() : void { this.state.digit('5'); }\r\n  public pressSix() : void { this.state.digit('6'); }\r\n  public pressSeven() : void { this.state.digit('7'); }\r\n  public pressEight() : void { this.state.digit('8'); }\r\n  public pressNine() : void { this.state.digit('9'); }\r\n\r\n  // \".\", \"=\", and \"C\" buttons\r\n  public pressDot() : void { this.state.decimalSeparator(); }\r\n  public pressEquals() : void { this.state.equals(this); }  \r\n  public pressClear() : void { this.state.clear(this); } \r\n   \r\n  // operator buttons\r\n  public pressPlus() : void { this.state.binaryOperator(this, Operator.Plus); }\r\n  public pressMinus() : void { this.state.binaryOperator(this, Operator.Minus); }\r\n  public pressMult() : void { this.state.binaryOperator(this, Operator.Mult); }\r\n  public pressDiv() : void { this.state.binaryOperator(this, Operator.Div); }\r\n  \r\n  // returns the contents of the calculator's display\r\n  public display() : string { return this.state.display(); }\r\n}"]},"metadata":{},"sourceType":"module"}